// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schedulerMessages {

namespace {

const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;
struct MsgOneofInstance {
  const ::schedulerMessages::Request* request_;
  const ::schedulerMessages::Response* response_;
}* Msg_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::schedulerMessages::Request_assign* assign_;
  const ::schedulerMessages::Request_queue* queue_;
  const ::schedulerMessages::Request_receive* receive_;
  const ::schedulerMessages::Request_requeue* requeue_;
  const ::schedulerMessages::Request_finish* finish_;
  const ::schedulerMessages::Request_cancel* cancel_;
  const ::schedulerMessages::Request_add_dependency* add_dependency_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
struct ResponseOneofInstance {
  const ::schedulerMessages::Response_assign* assign_;
  const ::schedulerMessages::Response_queue* queue_;
  const ::schedulerMessages::Response_receive* receive_;
  const ::schedulerMessages::Response_requeue* requeue_;
  const ::schedulerMessages::Response_finish* finish_;
  const ::schedulerMessages::Response_cancel* cancel_;
  const ::schedulerMessages::Response_add_dependency* add_dependency_;
}* Response_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_assign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_assign_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_queue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_queue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_receive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_receive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_requeue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_requeue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_finish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_finish_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_cancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_cancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_add_dependency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_add_dependency_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_assign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_assign_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_queue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_queue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_receive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_receive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_requeue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_requeue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_finish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_finish_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_cancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_cancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_add_dependency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_add_dependency_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  Msg_descriptor_ = file->message_type(0);
  static const int Msg_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Msg_default_oneof_instance_, request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Msg_default_oneof_instance_, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, type_),
  };
  Msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      -1,
      -1,
      -1,
      Msg_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _oneof_case_[0]),
      sizeof(Msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _is_default_instance_));
  Request_descriptor_ = file->message_type(1);
  static const int Request_offsets_[8] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, assign_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, queue_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, receive_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, requeue_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, finish_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, cancel_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, add_dependency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[8] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, assign_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, queue_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, receive_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, requeue_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, finish_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, cancel_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, add_dependency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, type_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      Response_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  Request_assign_descriptor_ = file->message_type(3);
  static const int Request_assign_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_assign, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_assign, job_),
  };
  Request_assign_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_assign_descriptor_,
      Request_assign::default_instance_,
      Request_assign_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_assign),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_assign, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_assign, _is_default_instance_));
  Request_queue_descriptor_ = file->message_type(4);
  static const int Request_queue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_queue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_queue, input_bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_queue, task_queued_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_queue, job_),
  };
  Request_queue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_queue_descriptor_,
      Request_queue::default_instance_,
      Request_queue_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_queue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_queue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_queue, _is_default_instance_));
  Request_receive_descriptor_ = file->message_type(5);
  static const int Request_receive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_receive, instance_name_),
  };
  Request_receive_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_receive_descriptor_,
      Request_receive::default_instance_,
      Request_receive_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_receive),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_receive, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_receive, _is_default_instance_));
  Request_requeue_descriptor_ = file->message_type(6);
  static const int Request_requeue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_requeue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_requeue, job_),
  };
  Request_requeue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_requeue_descriptor_,
      Request_requeue::default_instance_,
      Request_requeue_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_requeue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_requeue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_requeue, _is_default_instance_));
  Request_finish_descriptor_ = file->message_type(7);
  static const int Request_finish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_finish, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_finish, job_),
  };
  Request_finish_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_finish_descriptor_,
      Request_finish::default_instance_,
      Request_finish_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_finish),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_finish, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_finish, _is_default_instance_));
  Request_cancel_descriptor_ = file->message_type(8);
  static const int Request_cancel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_cancel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_cancel, job_),
  };
  Request_cancel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_cancel_descriptor_,
      Request_cancel::default_instance_,
      Request_cancel_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_cancel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_cancel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_cancel, _is_default_instance_));
  Request_add_dependency_descriptor_ = file->message_type(9);
  static const int Request_add_dependency_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_add_dependency, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_add_dependency, child_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_add_dependency, job_),
  };
  Request_add_dependency_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_add_dependency_descriptor_,
      Request_add_dependency::default_instance_,
      Request_add_dependency_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request_add_dependency),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_add_dependency, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_add_dependency, _is_default_instance_));
  Response_assign_descriptor_ = file->message_type(10);
  static const int Response_assign_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_assign, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_assign, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_assign, ids_),
  };
  Response_assign_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_assign_descriptor_,
      Response_assign::default_instance_,
      Response_assign_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response_assign),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_assign, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_assign, _is_default_instance_));
  Response_queue_descriptor_ = file->message_type(11);
  static const int Response_queue_offsets_[1] = {
  };
  Response_queue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_queue_descriptor_,
      Response_queue::default_instance_,
      Response_queue_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response_queue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_queue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_queue, _is_default_instance_));
  Response_receive_descriptor_ = file->message_type(12);
  static const int Response_receive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_receive, input_bundle_),
  };
  Response_receive_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_receive_descriptor_,
      Response_receive::default_instance_,
      Response_receive_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response_receive),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_receive, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_receive, _is_default_instance_));
  Response_requeue_descriptor_ = file->message_type(13);
  static const int Response_requeue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_requeue, requeue_failed_),
  };
  Response_requeue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_requeue_descriptor_,
      Response_requeue::default_instance_,
      Response_requeue_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response_requeue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_requeue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_requeue, _is_default_instance_));
  Response_finish_descriptor_ = file->message_type(14);
  static const int Response_finish_offsets_[1] = {
  };
  Response_finish_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_finish_descriptor_,
      Response_finish::default_instance_,
      Response_finish_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response_finish),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_finish, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_finish, _is_default_instance_));
  Response_cancel_descriptor_ = file->message_type(15);
  static const int Response_cancel_offsets_[1] = {
  };
  Response_cancel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_cancel_descriptor_,
      Response_cancel::default_instance_,
      Response_cancel_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response_cancel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_cancel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_cancel, _is_default_instance_));
  Response_add_dependency_descriptor_ = file->message_type(16);
  static const int Response_add_dependency_offsets_[1] = {
  };
  Response_add_dependency_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_add_dependency_descriptor_,
      Response_add_dependency::default_instance_,
      Response_add_dependency_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response_add_dependency),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_add_dependency, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_add_dependency, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Msg_descriptor_, &Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_assign_descriptor_, &Request_assign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_queue_descriptor_, &Request_queue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_receive_descriptor_, &Request_receive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_requeue_descriptor_, &Request_requeue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_finish_descriptor_, &Request_finish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_cancel_descriptor_, &Request_cancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_add_dependency_descriptor_, &Request_add_dependency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_assign_descriptor_, &Response_assign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_queue_descriptor_, &Response_queue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_receive_descriptor_, &Response_receive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_requeue_descriptor_, &Response_requeue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_finish_descriptor_, &Response_finish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_cancel_descriptor_, &Response_cancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_add_dependency_descriptor_, &Response_add_dependency::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete Msg::default_instance_;
  delete Msg_default_oneof_instance_;
  delete Msg_reflection_;
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_default_oneof_instance_;
  delete Response_reflection_;
  delete Request_assign::default_instance_;
  delete Request_assign_reflection_;
  delete Request_queue::default_instance_;
  delete Request_queue_reflection_;
  delete Request_receive::default_instance_;
  delete Request_receive_reflection_;
  delete Request_requeue::default_instance_;
  delete Request_requeue_reflection_;
  delete Request_finish::default_instance_;
  delete Request_finish_reflection_;
  delete Request_cancel::default_instance_;
  delete Request_cancel_reflection_;
  delete Request_add_dependency::default_instance_;
  delete Request_add_dependency_reflection_;
  delete Response_assign::default_instance_;
  delete Response_assign_reflection_;
  delete Response_queue::default_instance_;
  delete Response_queue_reflection_;
  delete Response_receive::default_instance_;
  delete Response_receive_reflection_;
  delete Response_requeue::default_instance_;
  delete Response_requeue_reflection_;
  delete Response_finish::default_instance_;
  delete Response_finish_reflection_;
  delete Response_cancel::default_instance_;
  delete Response_cancel_reflection_;
  delete Response_add_dependency::default_instance_;
  delete Response_add_dependency_reflection_;
}

void protobuf_AddDesc_msg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\021schedulerMessages\"m\n\003Msg\022-\n"
    "\007REQUEST\030\001 \001(\0132\032.schedulerMessages.Reque"
    "stH\000\022/\n\010RESPONSE\030\002 \001(\0132\033.schedulerMessag"
    "es.ResponseH\000B\006\n\004type\"\226\003\n\007Request\0223\n\006ASS"
    "IGN\030\001 \001(\0132!.schedulerMessages.Request_as"
    "signH\000\0221\n\005QUEUE\030\002 \001(\0132 .schedulerMessage"
    "s.Request_queueH\000\0225\n\007RECEIVE\030\003 \001(\0132\".sch"
    "edulerMessages.Request_receiveH\000\0225\n\007REQU"
    "EUE\030\004 \001(\0132\".schedulerMessages.Request_re"
    "queueH\000\0223\n\006FINISH\030\005 \001(\0132!.schedulerMessa"
    "ges.Request_finishH\000\0223\n\006CANCEL\030\006 \001(\0132!.s"
    "chedulerMessages.Request_cancelH\000\022C\n\016ADD"
    "_DEPENDENCY\030\007 \001(\0132).schedulerMessages.Re"
    "quest_add_dependencyH\000B\006\n\004type\"\236\003\n\010Respo"
    "nse\0224\n\006ASSIGN\030\001 \001(\0132\".schedulerMessages."
    "Response_assignH\000\0222\n\005QUEUE\030\002 \001(\0132!.sched"
    "ulerMessages.Response_queueH\000\0226\n\007RECEIVE"
    "\030\003 \001(\0132#.schedulerMessages.Response_rece"
    "iveH\000\0226\n\007REQUEUE\030\004 \001(\0132#.schedulerMessag"
    "es.Response_requeueH\000\0224\n\006FINISH\030\005 \001(\0132\"."
    "schedulerMessages.Response_finishH\000\0224\n\006C"
    "ANCEL\030\006 \001(\0132\".schedulerMessages.Response"
    "_cancelH\000\022D\n\016ADD_DEPENDENCY\030\007 \001(\0132*.sche"
    "dulerMessages.Response_add_dependencyH\000B"
    "\006\n\004type\",\n\016Request_assign\022\r\n\005count\030\001 \001(\005"
    "\022\013\n\003job\030\002 \001(\t\"X\n\rRequest_queue\022\n\n\002id\030\001 \001"
    "(\005\022\024\n\014input_bundle\030\002 \001(\t\022\030\n\020task_queued_"
    "from\030\003 \001(\005\022\013\n\003job\030\004 \001(\t\"(\n\017Request_recei"
    "ve\022\025\n\rinstance_name\030\001 \001(\t\"*\n\017Request_req"
    "ueue\022\n\n\002id\030\001 \001(\005\022\013\n\003job\030\002 \001(\t\")\n\016Request"
    "_finish\022\n\n\002id\030\001 \001(\005\022\013\n\003job\030\002 \001(\t\")\n\016Requ"
    "est_cancel\022\n\n\002id\030\001 \001(\005\022\013\n\003job\030\002 \001(\t\"J\n\026R"
    "equest_add_dependency\022\021\n\tparent_id\030\001 \001(\005"
    "\022\020\n\010child_id\030\002 \001(\005\022\013\n\003job\030\003 \001(\t\"<\n\017Respo"
    "nse_assign\022\020\n\010multiple\030\001 \001(\010\022\n\n\002id\030\002 \001(\005"
    "\022\013\n\003ids\030\003 \003(\005\"\020\n\016Response_queue\"(\n\020Respo"
    "nse_receive\022\024\n\014input_bundle\030\001 \001(\t\"*\n\020Res"
    "ponse_requeue\022\026\n\016requeue_failed\030\001 \001(\010\"\021\n"
    "\017Response_finish\"\021\n\017Response_cancel\"\031\n\027R"
    "esponse_add_dependencyb\006proto3", 1590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  Msg::default_instance_ = new Msg();
  Msg_default_oneof_instance_ = new MsgOneofInstance();
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance();
  Response::default_instance_ = new Response();
  Response_default_oneof_instance_ = new ResponseOneofInstance();
  Request_assign::default_instance_ = new Request_assign();
  Request_queue::default_instance_ = new Request_queue();
  Request_receive::default_instance_ = new Request_receive();
  Request_requeue::default_instance_ = new Request_requeue();
  Request_finish::default_instance_ = new Request_finish();
  Request_cancel::default_instance_ = new Request_cancel();
  Request_add_dependency::default_instance_ = new Request_add_dependency();
  Response_assign::default_instance_ = new Response_assign();
  Response_queue::default_instance_ = new Response_queue();
  Response_receive::default_instance_ = new Response_receive();
  Response_requeue::default_instance_ = new Response_requeue();
  Response_finish::default_instance_ = new Response_finish();
  Response_cancel::default_instance_ = new Response_cancel();
  Response_add_dependency::default_instance_ = new Response_add_dependency();
  Msg::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Request_assign::default_instance_->InitAsDefaultInstance();
  Request_queue::default_instance_->InitAsDefaultInstance();
  Request_receive::default_instance_->InitAsDefaultInstance();
  Request_requeue::default_instance_->InitAsDefaultInstance();
  Request_finish::default_instance_->InitAsDefaultInstance();
  Request_cancel::default_instance_->InitAsDefaultInstance();
  Request_add_dependency::default_instance_->InitAsDefaultInstance();
  Response_assign::default_instance_->InitAsDefaultInstance();
  Response_queue::default_instance_->InitAsDefaultInstance();
  Response_receive::default_instance_->InitAsDefaultInstance();
  Response_requeue::default_instance_->InitAsDefaultInstance();
  Response_finish::default_instance_->InitAsDefaultInstance();
  Response_cancel::default_instance_->InitAsDefaultInstance();
  Response_add_dependency::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg::kREQUESTFieldNumber;
const int Msg::kRESPONSEFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg::Msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Msg)
}

void Msg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Msg_default_oneof_instance_->request_ = const_cast< ::schedulerMessages::Request*>(&::schedulerMessages::Request::default_instance());
  Msg_default_oneof_instance_->response_ = const_cast< ::schedulerMessages::Response*>(&::schedulerMessages::Response::default_instance());
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Msg)
}

void Msg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_type();
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
  if (this != default_instance_) {
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New(::google::protobuf::Arena* arena) const {
  Msg* n = new Msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Msg::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:schedulerMessages.Msg)
  switch(type_case()) {
    case kREQUEST: {
      delete type_.request_;
      break;
    }
    case kRESPONSE: {
      delete type_.response_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Msg)
  clear_type();
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schedulerMessages.Request REQUEST = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RESPONSE;
        break;
      }

      // optional .schedulerMessages.Response RESPONSE = 2;
      case 2: {
        if (tag == 18) {
         parse_RESPONSE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Msg)
  return false;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Msg)
  // optional .schedulerMessages.Request REQUEST = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.request_, output);
  }

  // optional .schedulerMessages.Response RESPONSE = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.response_, output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Msg)
}

::google::protobuf::uint8* Msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Msg)
  // optional .schedulerMessages.Request REQUEST = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *type_.request_, false, target);
  }

  // optional .schedulerMessages.Response RESPONSE = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *type_.response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Msg)
  return target;
}

int Msg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Msg)
  int total_size = 0;

  switch (type_case()) {
    // optional .schedulerMessages.Request REQUEST = 1;
    case kREQUEST: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.request_);
      break;
    }
    // optional .schedulerMessages.Response RESPONSE = 2;
    case kRESPONSE: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.response_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Msg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Msg)
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.type_case()) {
    case kREQUEST: {
      mutable_request()->::schedulerMessages::Request::MergeFrom(from.request());
      break;
    }
    case kRESPONSE: {
      mutable_response()->::schedulerMessages::Response::MergeFrom(from.response());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {

  return true;
}

void Msg::Swap(Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg::InternalSwap(Msg* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Msg

// optional .schedulerMessages.Request REQUEST = 1;
bool Msg::has_request() const {
  return type_case() == kREQUEST;
}
void Msg::set_has_request() {
  _oneof_case_[0] = kREQUEST;
}
void Msg::clear_request() {
  if (has_request()) {
    delete type_.request_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Request& Msg::request() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Msg.REQUEST)
  return has_request()
      ? *type_.request_
      : ::schedulerMessages::Request::default_instance();
}
::schedulerMessages::Request* Msg::mutable_request() {
  if (!has_request()) {
    clear_type();
    set_has_request();
    type_.request_ = new ::schedulerMessages::Request;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Msg.REQUEST)
  return type_.request_;
}
::schedulerMessages::Request* Msg::release_request() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Msg.REQUEST)
  if (has_request()) {
    clear_has_type();
    ::schedulerMessages::Request* temp = type_.request_;
    type_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Msg::set_allocated_request(::schedulerMessages::Request* request) {
  clear_type();
  if (request) {
    set_has_request();
    type_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Msg.REQUEST)
}

// optional .schedulerMessages.Response RESPONSE = 2;
bool Msg::has_response() const {
  return type_case() == kRESPONSE;
}
void Msg::set_has_response() {
  _oneof_case_[0] = kRESPONSE;
}
void Msg::clear_response() {
  if (has_response()) {
    delete type_.response_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Response& Msg::response() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Msg.RESPONSE)
  return has_response()
      ? *type_.response_
      : ::schedulerMessages::Response::default_instance();
}
::schedulerMessages::Response* Msg::mutable_response() {
  if (!has_response()) {
    clear_type();
    set_has_response();
    type_.response_ = new ::schedulerMessages::Response;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Msg.RESPONSE)
  return type_.response_;
}
::schedulerMessages::Response* Msg::release_response() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Msg.RESPONSE)
  if (has_response()) {
    clear_has_type();
    ::schedulerMessages::Response* temp = type_.response_;
    type_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Msg::set_allocated_response(::schedulerMessages::Response* response) {
  clear_type();
  if (response) {
    set_has_response();
    type_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Msg.RESPONSE)
}

bool Msg::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void Msg::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
Msg::TypeCase Msg::type_case() const {
  return Msg::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kASSIGNFieldNumber;
const int Request::kQUEUEFieldNumber;
const int Request::kRECEIVEFieldNumber;
const int Request::kREQUEUEFieldNumber;
const int Request::kFINISHFieldNumber;
const int Request::kCANCELFieldNumber;
const int Request::kADDDEPENDENCYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Request_default_oneof_instance_->assign_ = const_cast< ::schedulerMessages::Request_assign*>(&::schedulerMessages::Request_assign::default_instance());
  Request_default_oneof_instance_->queue_ = const_cast< ::schedulerMessages::Request_queue*>(&::schedulerMessages::Request_queue::default_instance());
  Request_default_oneof_instance_->receive_ = const_cast< ::schedulerMessages::Request_receive*>(&::schedulerMessages::Request_receive::default_instance());
  Request_default_oneof_instance_->requeue_ = const_cast< ::schedulerMessages::Request_requeue*>(&::schedulerMessages::Request_requeue::default_instance());
  Request_default_oneof_instance_->finish_ = const_cast< ::schedulerMessages::Request_finish*>(&::schedulerMessages::Request_finish::default_instance());
  Request_default_oneof_instance_->cancel_ = const_cast< ::schedulerMessages::Request_cancel*>(&::schedulerMessages::Request_cancel::default_instance());
  Request_default_oneof_instance_->add_dependency_ = const_cast< ::schedulerMessages::Request_add_dependency*>(&::schedulerMessages::Request_add_dependency::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_type();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:schedulerMessages.Request)
  switch(type_case()) {
    case kASSIGN: {
      delete type_.assign_;
      break;
    }
    case kQUEUE: {
      delete type_.queue_;
      break;
    }
    case kRECEIVE: {
      delete type_.receive_;
      break;
    }
    case kREQUEUE: {
      delete type_.requeue_;
      break;
    }
    case kFINISH: {
      delete type_.finish_;
      break;
    }
    case kCANCEL: {
      delete type_.cancel_;
      break;
    }
    case kADDDEPENDENCY: {
      delete type_.add_dependency_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Request)
  clear_type();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schedulerMessages.Request_assign ASSIGN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_QUEUE;
        break;
      }

      // optional .schedulerMessages.Request_queue QUEUE = 2;
      case 2: {
        if (tag == 18) {
         parse_QUEUE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RECEIVE;
        break;
      }

      // optional .schedulerMessages.Request_receive RECEIVE = 3;
      case 3: {
        if (tag == 26) {
         parse_RECEIVE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receive()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_REQUEUE;
        break;
      }

      // optional .schedulerMessages.Request_requeue REQUEUE = 4;
      case 4: {
        if (tag == 34) {
         parse_REQUEUE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requeue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_FINISH;
        break;
      }

      // optional .schedulerMessages.Request_finish FINISH = 5;
      case 5: {
        if (tag == 42) {
         parse_FINISH:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CANCEL;
        break;
      }

      // optional .schedulerMessages.Request_cancel CANCEL = 6;
      case 6: {
        if (tag == 50) {
         parse_CANCEL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cancel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ADD_DEPENDENCY;
        break;
      }

      // optional .schedulerMessages.Request_add_dependency ADD_DEPENDENCY = 7;
      case 7: {
        if (tag == 58) {
         parse_ADD_DEPENDENCY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_dependency()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Request)
  // optional .schedulerMessages.Request_assign ASSIGN = 1;
  if (has_assign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.assign_, output);
  }

  // optional .schedulerMessages.Request_queue QUEUE = 2;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.queue_, output);
  }

  // optional .schedulerMessages.Request_receive RECEIVE = 3;
  if (has_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.receive_, output);
  }

  // optional .schedulerMessages.Request_requeue REQUEUE = 4;
  if (has_requeue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *type_.requeue_, output);
  }

  // optional .schedulerMessages.Request_finish FINISH = 5;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *type_.finish_, output);
  }

  // optional .schedulerMessages.Request_cancel CANCEL = 6;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *type_.cancel_, output);
  }

  // optional .schedulerMessages.Request_add_dependency ADD_DEPENDENCY = 7;
  if (has_add_dependency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *type_.add_dependency_, output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Request)
  // optional .schedulerMessages.Request_assign ASSIGN = 1;
  if (has_assign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *type_.assign_, false, target);
  }

  // optional .schedulerMessages.Request_queue QUEUE = 2;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *type_.queue_, false, target);
  }

  // optional .schedulerMessages.Request_receive RECEIVE = 3;
  if (has_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *type_.receive_, false, target);
  }

  // optional .schedulerMessages.Request_requeue REQUEUE = 4;
  if (has_requeue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *type_.requeue_, false, target);
  }

  // optional .schedulerMessages.Request_finish FINISH = 5;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *type_.finish_, false, target);
  }

  // optional .schedulerMessages.Request_cancel CANCEL = 6;
  if (has_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *type_.cancel_, false, target);
  }

  // optional .schedulerMessages.Request_add_dependency ADD_DEPENDENCY = 7;
  if (has_add_dependency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *type_.add_dependency_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Request)
  int total_size = 0;

  switch (type_case()) {
    // optional .schedulerMessages.Request_assign ASSIGN = 1;
    case kASSIGN: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.assign_);
      break;
    }
    // optional .schedulerMessages.Request_queue QUEUE = 2;
    case kQUEUE: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.queue_);
      break;
    }
    // optional .schedulerMessages.Request_receive RECEIVE = 3;
    case kRECEIVE: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.receive_);
      break;
    }
    // optional .schedulerMessages.Request_requeue REQUEUE = 4;
    case kREQUEUE: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.requeue_);
      break;
    }
    // optional .schedulerMessages.Request_finish FINISH = 5;
    case kFINISH: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.finish_);
      break;
    }
    // optional .schedulerMessages.Request_cancel CANCEL = 6;
    case kCANCEL: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.cancel_);
      break;
    }
    // optional .schedulerMessages.Request_add_dependency ADD_DEPENDENCY = 7;
    case kADDDEPENDENCY: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.add_dependency_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.type_case()) {
    case kASSIGN: {
      mutable_assign()->::schedulerMessages::Request_assign::MergeFrom(from.assign());
      break;
    }
    case kQUEUE: {
      mutable_queue()->::schedulerMessages::Request_queue::MergeFrom(from.queue());
      break;
    }
    case kRECEIVE: {
      mutable_receive()->::schedulerMessages::Request_receive::MergeFrom(from.receive());
      break;
    }
    case kREQUEUE: {
      mutable_requeue()->::schedulerMessages::Request_requeue::MergeFrom(from.requeue());
      break;
    }
    case kFINISH: {
      mutable_finish()->::schedulerMessages::Request_finish::MergeFrom(from.finish());
      break;
    }
    case kCANCEL: {
      mutable_cancel()->::schedulerMessages::Request_cancel::MergeFrom(from.cancel());
      break;
    }
    case kADDDEPENDENCY: {
      mutable_add_dependency()->::schedulerMessages::Request_add_dependency::MergeFrom(from.add_dependency());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .schedulerMessages.Request_assign ASSIGN = 1;
bool Request::has_assign() const {
  return type_case() == kASSIGN;
}
void Request::set_has_assign() {
  _oneof_case_[0] = kASSIGN;
}
void Request::clear_assign() {
  if (has_assign()) {
    delete type_.assign_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Request_assign& Request::assign() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request.ASSIGN)
  return has_assign()
      ? *type_.assign_
      : ::schedulerMessages::Request_assign::default_instance();
}
::schedulerMessages::Request_assign* Request::mutable_assign() {
  if (!has_assign()) {
    clear_type();
    set_has_assign();
    type_.assign_ = new ::schedulerMessages::Request_assign;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request.ASSIGN)
  return type_.assign_;
}
::schedulerMessages::Request_assign* Request::release_assign() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request.ASSIGN)
  if (has_assign()) {
    clear_has_type();
    ::schedulerMessages::Request_assign* temp = type_.assign_;
    type_.assign_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_assign(::schedulerMessages::Request_assign* assign) {
  clear_type();
  if (assign) {
    set_has_assign();
    type_.assign_ = assign;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request.ASSIGN)
}

// optional .schedulerMessages.Request_queue QUEUE = 2;
bool Request::has_queue() const {
  return type_case() == kQUEUE;
}
void Request::set_has_queue() {
  _oneof_case_[0] = kQUEUE;
}
void Request::clear_queue() {
  if (has_queue()) {
    delete type_.queue_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Request_queue& Request::queue() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request.QUEUE)
  return has_queue()
      ? *type_.queue_
      : ::schedulerMessages::Request_queue::default_instance();
}
::schedulerMessages::Request_queue* Request::mutable_queue() {
  if (!has_queue()) {
    clear_type();
    set_has_queue();
    type_.queue_ = new ::schedulerMessages::Request_queue;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request.QUEUE)
  return type_.queue_;
}
::schedulerMessages::Request_queue* Request::release_queue() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request.QUEUE)
  if (has_queue()) {
    clear_has_type();
    ::schedulerMessages::Request_queue* temp = type_.queue_;
    type_.queue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_queue(::schedulerMessages::Request_queue* queue) {
  clear_type();
  if (queue) {
    set_has_queue();
    type_.queue_ = queue;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request.QUEUE)
}

// optional .schedulerMessages.Request_receive RECEIVE = 3;
bool Request::has_receive() const {
  return type_case() == kRECEIVE;
}
void Request::set_has_receive() {
  _oneof_case_[0] = kRECEIVE;
}
void Request::clear_receive() {
  if (has_receive()) {
    delete type_.receive_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Request_receive& Request::receive() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request.RECEIVE)
  return has_receive()
      ? *type_.receive_
      : ::schedulerMessages::Request_receive::default_instance();
}
::schedulerMessages::Request_receive* Request::mutable_receive() {
  if (!has_receive()) {
    clear_type();
    set_has_receive();
    type_.receive_ = new ::schedulerMessages::Request_receive;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request.RECEIVE)
  return type_.receive_;
}
::schedulerMessages::Request_receive* Request::release_receive() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request.RECEIVE)
  if (has_receive()) {
    clear_has_type();
    ::schedulerMessages::Request_receive* temp = type_.receive_;
    type_.receive_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_receive(::schedulerMessages::Request_receive* receive) {
  clear_type();
  if (receive) {
    set_has_receive();
    type_.receive_ = receive;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request.RECEIVE)
}

// optional .schedulerMessages.Request_requeue REQUEUE = 4;
bool Request::has_requeue() const {
  return type_case() == kREQUEUE;
}
void Request::set_has_requeue() {
  _oneof_case_[0] = kREQUEUE;
}
void Request::clear_requeue() {
  if (has_requeue()) {
    delete type_.requeue_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Request_requeue& Request::requeue() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request.REQUEUE)
  return has_requeue()
      ? *type_.requeue_
      : ::schedulerMessages::Request_requeue::default_instance();
}
::schedulerMessages::Request_requeue* Request::mutable_requeue() {
  if (!has_requeue()) {
    clear_type();
    set_has_requeue();
    type_.requeue_ = new ::schedulerMessages::Request_requeue;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request.REQUEUE)
  return type_.requeue_;
}
::schedulerMessages::Request_requeue* Request::release_requeue() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request.REQUEUE)
  if (has_requeue()) {
    clear_has_type();
    ::schedulerMessages::Request_requeue* temp = type_.requeue_;
    type_.requeue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_requeue(::schedulerMessages::Request_requeue* requeue) {
  clear_type();
  if (requeue) {
    set_has_requeue();
    type_.requeue_ = requeue;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request.REQUEUE)
}

// optional .schedulerMessages.Request_finish FINISH = 5;
bool Request::has_finish() const {
  return type_case() == kFINISH;
}
void Request::set_has_finish() {
  _oneof_case_[0] = kFINISH;
}
void Request::clear_finish() {
  if (has_finish()) {
    delete type_.finish_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Request_finish& Request::finish() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request.FINISH)
  return has_finish()
      ? *type_.finish_
      : ::schedulerMessages::Request_finish::default_instance();
}
::schedulerMessages::Request_finish* Request::mutable_finish() {
  if (!has_finish()) {
    clear_type();
    set_has_finish();
    type_.finish_ = new ::schedulerMessages::Request_finish;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request.FINISH)
  return type_.finish_;
}
::schedulerMessages::Request_finish* Request::release_finish() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request.FINISH)
  if (has_finish()) {
    clear_has_type();
    ::schedulerMessages::Request_finish* temp = type_.finish_;
    type_.finish_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_finish(::schedulerMessages::Request_finish* finish) {
  clear_type();
  if (finish) {
    set_has_finish();
    type_.finish_ = finish;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request.FINISH)
}

// optional .schedulerMessages.Request_cancel CANCEL = 6;
bool Request::has_cancel() const {
  return type_case() == kCANCEL;
}
void Request::set_has_cancel() {
  _oneof_case_[0] = kCANCEL;
}
void Request::clear_cancel() {
  if (has_cancel()) {
    delete type_.cancel_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Request_cancel& Request::cancel() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request.CANCEL)
  return has_cancel()
      ? *type_.cancel_
      : ::schedulerMessages::Request_cancel::default_instance();
}
::schedulerMessages::Request_cancel* Request::mutable_cancel() {
  if (!has_cancel()) {
    clear_type();
    set_has_cancel();
    type_.cancel_ = new ::schedulerMessages::Request_cancel;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request.CANCEL)
  return type_.cancel_;
}
::schedulerMessages::Request_cancel* Request::release_cancel() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request.CANCEL)
  if (has_cancel()) {
    clear_has_type();
    ::schedulerMessages::Request_cancel* temp = type_.cancel_;
    type_.cancel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_cancel(::schedulerMessages::Request_cancel* cancel) {
  clear_type();
  if (cancel) {
    set_has_cancel();
    type_.cancel_ = cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request.CANCEL)
}

// optional .schedulerMessages.Request_add_dependency ADD_DEPENDENCY = 7;
bool Request::has_add_dependency() const {
  return type_case() == kADDDEPENDENCY;
}
void Request::set_has_add_dependency() {
  _oneof_case_[0] = kADDDEPENDENCY;
}
void Request::clear_add_dependency() {
  if (has_add_dependency()) {
    delete type_.add_dependency_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Request_add_dependency& Request::add_dependency() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request.ADD_DEPENDENCY)
  return has_add_dependency()
      ? *type_.add_dependency_
      : ::schedulerMessages::Request_add_dependency::default_instance();
}
::schedulerMessages::Request_add_dependency* Request::mutable_add_dependency() {
  if (!has_add_dependency()) {
    clear_type();
    set_has_add_dependency();
    type_.add_dependency_ = new ::schedulerMessages::Request_add_dependency;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request.ADD_DEPENDENCY)
  return type_.add_dependency_;
}
::schedulerMessages::Request_add_dependency* Request::release_add_dependency() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request.ADD_DEPENDENCY)
  if (has_add_dependency()) {
    clear_has_type();
    ::schedulerMessages::Request_add_dependency* temp = type_.add_dependency_;
    type_.add_dependency_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_add_dependency(::schedulerMessages::Request_add_dependency* add_dependency) {
  clear_type();
  if (add_dependency) {
    set_has_add_dependency();
    type_.add_dependency_ = add_dependency;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request.ADD_DEPENDENCY)
}

bool Request::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void Request::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
Request::TypeCase Request::type_case() const {
  return Request::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kASSIGNFieldNumber;
const int Response::kQUEUEFieldNumber;
const int Response::kRECEIVEFieldNumber;
const int Response::kREQUEUEFieldNumber;
const int Response::kFINISHFieldNumber;
const int Response::kCANCELFieldNumber;
const int Response::kADDDEPENDENCYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Response_default_oneof_instance_->assign_ = const_cast< ::schedulerMessages::Response_assign*>(&::schedulerMessages::Response_assign::default_instance());
  Response_default_oneof_instance_->queue_ = const_cast< ::schedulerMessages::Response_queue*>(&::schedulerMessages::Response_queue::default_instance());
  Response_default_oneof_instance_->receive_ = const_cast< ::schedulerMessages::Response_receive*>(&::schedulerMessages::Response_receive::default_instance());
  Response_default_oneof_instance_->requeue_ = const_cast< ::schedulerMessages::Response_requeue*>(&::schedulerMessages::Response_requeue::default_instance());
  Response_default_oneof_instance_->finish_ = const_cast< ::schedulerMessages::Response_finish*>(&::schedulerMessages::Response_finish::default_instance());
  Response_default_oneof_instance_->cancel_ = const_cast< ::schedulerMessages::Response_cancel*>(&::schedulerMessages::Response_cancel::default_instance());
  Response_default_oneof_instance_->add_dependency_ = const_cast< ::schedulerMessages::Response_add_dependency*>(&::schedulerMessages::Response_add_dependency::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_type();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:schedulerMessages.Response)
  switch(type_case()) {
    case kASSIGN: {
      delete type_.assign_;
      break;
    }
    case kQUEUE: {
      delete type_.queue_;
      break;
    }
    case kRECEIVE: {
      delete type_.receive_;
      break;
    }
    case kREQUEUE: {
      delete type_.requeue_;
      break;
    }
    case kFINISH: {
      delete type_.finish_;
      break;
    }
    case kCANCEL: {
      delete type_.cancel_;
      break;
    }
    case kADDDEPENDENCY: {
      delete type_.add_dependency_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Response)
  clear_type();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schedulerMessages.Response_assign ASSIGN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_QUEUE;
        break;
      }

      // optional .schedulerMessages.Response_queue QUEUE = 2;
      case 2: {
        if (tag == 18) {
         parse_QUEUE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RECEIVE;
        break;
      }

      // optional .schedulerMessages.Response_receive RECEIVE = 3;
      case 3: {
        if (tag == 26) {
         parse_RECEIVE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receive()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_REQUEUE;
        break;
      }

      // optional .schedulerMessages.Response_requeue REQUEUE = 4;
      case 4: {
        if (tag == 34) {
         parse_REQUEUE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requeue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_FINISH;
        break;
      }

      // optional .schedulerMessages.Response_finish FINISH = 5;
      case 5: {
        if (tag == 42) {
         parse_FINISH:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CANCEL;
        break;
      }

      // optional .schedulerMessages.Response_cancel CANCEL = 6;
      case 6: {
        if (tag == 50) {
         parse_CANCEL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cancel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ADD_DEPENDENCY;
        break;
      }

      // optional .schedulerMessages.Response_add_dependency ADD_DEPENDENCY = 7;
      case 7: {
        if (tag == 58) {
         parse_ADD_DEPENDENCY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_dependency()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Response)
  // optional .schedulerMessages.Response_assign ASSIGN = 1;
  if (has_assign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.assign_, output);
  }

  // optional .schedulerMessages.Response_queue QUEUE = 2;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.queue_, output);
  }

  // optional .schedulerMessages.Response_receive RECEIVE = 3;
  if (has_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.receive_, output);
  }

  // optional .schedulerMessages.Response_requeue REQUEUE = 4;
  if (has_requeue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *type_.requeue_, output);
  }

  // optional .schedulerMessages.Response_finish FINISH = 5;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *type_.finish_, output);
  }

  // optional .schedulerMessages.Response_cancel CANCEL = 6;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *type_.cancel_, output);
  }

  // optional .schedulerMessages.Response_add_dependency ADD_DEPENDENCY = 7;
  if (has_add_dependency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *type_.add_dependency_, output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Response)
  // optional .schedulerMessages.Response_assign ASSIGN = 1;
  if (has_assign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *type_.assign_, false, target);
  }

  // optional .schedulerMessages.Response_queue QUEUE = 2;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *type_.queue_, false, target);
  }

  // optional .schedulerMessages.Response_receive RECEIVE = 3;
  if (has_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *type_.receive_, false, target);
  }

  // optional .schedulerMessages.Response_requeue REQUEUE = 4;
  if (has_requeue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *type_.requeue_, false, target);
  }

  // optional .schedulerMessages.Response_finish FINISH = 5;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *type_.finish_, false, target);
  }

  // optional .schedulerMessages.Response_cancel CANCEL = 6;
  if (has_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *type_.cancel_, false, target);
  }

  // optional .schedulerMessages.Response_add_dependency ADD_DEPENDENCY = 7;
  if (has_add_dependency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *type_.add_dependency_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Response)
  int total_size = 0;

  switch (type_case()) {
    // optional .schedulerMessages.Response_assign ASSIGN = 1;
    case kASSIGN: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.assign_);
      break;
    }
    // optional .schedulerMessages.Response_queue QUEUE = 2;
    case kQUEUE: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.queue_);
      break;
    }
    // optional .schedulerMessages.Response_receive RECEIVE = 3;
    case kRECEIVE: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.receive_);
      break;
    }
    // optional .schedulerMessages.Response_requeue REQUEUE = 4;
    case kREQUEUE: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.requeue_);
      break;
    }
    // optional .schedulerMessages.Response_finish FINISH = 5;
    case kFINISH: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.finish_);
      break;
    }
    // optional .schedulerMessages.Response_cancel CANCEL = 6;
    case kCANCEL: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.cancel_);
      break;
    }
    // optional .schedulerMessages.Response_add_dependency ADD_DEPENDENCY = 7;
    case kADDDEPENDENCY: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.add_dependency_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.type_case()) {
    case kASSIGN: {
      mutable_assign()->::schedulerMessages::Response_assign::MergeFrom(from.assign());
      break;
    }
    case kQUEUE: {
      mutable_queue()->::schedulerMessages::Response_queue::MergeFrom(from.queue());
      break;
    }
    case kRECEIVE: {
      mutable_receive()->::schedulerMessages::Response_receive::MergeFrom(from.receive());
      break;
    }
    case kREQUEUE: {
      mutable_requeue()->::schedulerMessages::Response_requeue::MergeFrom(from.requeue());
      break;
    }
    case kFINISH: {
      mutable_finish()->::schedulerMessages::Response_finish::MergeFrom(from.finish());
      break;
    }
    case kCANCEL: {
      mutable_cancel()->::schedulerMessages::Response_cancel::MergeFrom(from.cancel());
      break;
    }
    case kADDDEPENDENCY: {
      mutable_add_dependency()->::schedulerMessages::Response_add_dependency::MergeFrom(from.add_dependency());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .schedulerMessages.Response_assign ASSIGN = 1;
bool Response::has_assign() const {
  return type_case() == kASSIGN;
}
void Response::set_has_assign() {
  _oneof_case_[0] = kASSIGN;
}
void Response::clear_assign() {
  if (has_assign()) {
    delete type_.assign_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Response_assign& Response::assign() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response.ASSIGN)
  return has_assign()
      ? *type_.assign_
      : ::schedulerMessages::Response_assign::default_instance();
}
::schedulerMessages::Response_assign* Response::mutable_assign() {
  if (!has_assign()) {
    clear_type();
    set_has_assign();
    type_.assign_ = new ::schedulerMessages::Response_assign;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Response.ASSIGN)
  return type_.assign_;
}
::schedulerMessages::Response_assign* Response::release_assign() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Response.ASSIGN)
  if (has_assign()) {
    clear_has_type();
    ::schedulerMessages::Response_assign* temp = type_.assign_;
    type_.assign_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_assign(::schedulerMessages::Response_assign* assign) {
  clear_type();
  if (assign) {
    set_has_assign();
    type_.assign_ = assign;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Response.ASSIGN)
}

// optional .schedulerMessages.Response_queue QUEUE = 2;
bool Response::has_queue() const {
  return type_case() == kQUEUE;
}
void Response::set_has_queue() {
  _oneof_case_[0] = kQUEUE;
}
void Response::clear_queue() {
  if (has_queue()) {
    delete type_.queue_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Response_queue& Response::queue() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response.QUEUE)
  return has_queue()
      ? *type_.queue_
      : ::schedulerMessages::Response_queue::default_instance();
}
::schedulerMessages::Response_queue* Response::mutable_queue() {
  if (!has_queue()) {
    clear_type();
    set_has_queue();
    type_.queue_ = new ::schedulerMessages::Response_queue;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Response.QUEUE)
  return type_.queue_;
}
::schedulerMessages::Response_queue* Response::release_queue() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Response.QUEUE)
  if (has_queue()) {
    clear_has_type();
    ::schedulerMessages::Response_queue* temp = type_.queue_;
    type_.queue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_queue(::schedulerMessages::Response_queue* queue) {
  clear_type();
  if (queue) {
    set_has_queue();
    type_.queue_ = queue;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Response.QUEUE)
}

// optional .schedulerMessages.Response_receive RECEIVE = 3;
bool Response::has_receive() const {
  return type_case() == kRECEIVE;
}
void Response::set_has_receive() {
  _oneof_case_[0] = kRECEIVE;
}
void Response::clear_receive() {
  if (has_receive()) {
    delete type_.receive_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Response_receive& Response::receive() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response.RECEIVE)
  return has_receive()
      ? *type_.receive_
      : ::schedulerMessages::Response_receive::default_instance();
}
::schedulerMessages::Response_receive* Response::mutable_receive() {
  if (!has_receive()) {
    clear_type();
    set_has_receive();
    type_.receive_ = new ::schedulerMessages::Response_receive;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Response.RECEIVE)
  return type_.receive_;
}
::schedulerMessages::Response_receive* Response::release_receive() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Response.RECEIVE)
  if (has_receive()) {
    clear_has_type();
    ::schedulerMessages::Response_receive* temp = type_.receive_;
    type_.receive_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_receive(::schedulerMessages::Response_receive* receive) {
  clear_type();
  if (receive) {
    set_has_receive();
    type_.receive_ = receive;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Response.RECEIVE)
}

// optional .schedulerMessages.Response_requeue REQUEUE = 4;
bool Response::has_requeue() const {
  return type_case() == kREQUEUE;
}
void Response::set_has_requeue() {
  _oneof_case_[0] = kREQUEUE;
}
void Response::clear_requeue() {
  if (has_requeue()) {
    delete type_.requeue_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Response_requeue& Response::requeue() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response.REQUEUE)
  return has_requeue()
      ? *type_.requeue_
      : ::schedulerMessages::Response_requeue::default_instance();
}
::schedulerMessages::Response_requeue* Response::mutable_requeue() {
  if (!has_requeue()) {
    clear_type();
    set_has_requeue();
    type_.requeue_ = new ::schedulerMessages::Response_requeue;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Response.REQUEUE)
  return type_.requeue_;
}
::schedulerMessages::Response_requeue* Response::release_requeue() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Response.REQUEUE)
  if (has_requeue()) {
    clear_has_type();
    ::schedulerMessages::Response_requeue* temp = type_.requeue_;
    type_.requeue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_requeue(::schedulerMessages::Response_requeue* requeue) {
  clear_type();
  if (requeue) {
    set_has_requeue();
    type_.requeue_ = requeue;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Response.REQUEUE)
}

// optional .schedulerMessages.Response_finish FINISH = 5;
bool Response::has_finish() const {
  return type_case() == kFINISH;
}
void Response::set_has_finish() {
  _oneof_case_[0] = kFINISH;
}
void Response::clear_finish() {
  if (has_finish()) {
    delete type_.finish_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Response_finish& Response::finish() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response.FINISH)
  return has_finish()
      ? *type_.finish_
      : ::schedulerMessages::Response_finish::default_instance();
}
::schedulerMessages::Response_finish* Response::mutable_finish() {
  if (!has_finish()) {
    clear_type();
    set_has_finish();
    type_.finish_ = new ::schedulerMessages::Response_finish;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Response.FINISH)
  return type_.finish_;
}
::schedulerMessages::Response_finish* Response::release_finish() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Response.FINISH)
  if (has_finish()) {
    clear_has_type();
    ::schedulerMessages::Response_finish* temp = type_.finish_;
    type_.finish_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_finish(::schedulerMessages::Response_finish* finish) {
  clear_type();
  if (finish) {
    set_has_finish();
    type_.finish_ = finish;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Response.FINISH)
}

// optional .schedulerMessages.Response_cancel CANCEL = 6;
bool Response::has_cancel() const {
  return type_case() == kCANCEL;
}
void Response::set_has_cancel() {
  _oneof_case_[0] = kCANCEL;
}
void Response::clear_cancel() {
  if (has_cancel()) {
    delete type_.cancel_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Response_cancel& Response::cancel() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response.CANCEL)
  return has_cancel()
      ? *type_.cancel_
      : ::schedulerMessages::Response_cancel::default_instance();
}
::schedulerMessages::Response_cancel* Response::mutable_cancel() {
  if (!has_cancel()) {
    clear_type();
    set_has_cancel();
    type_.cancel_ = new ::schedulerMessages::Response_cancel;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Response.CANCEL)
  return type_.cancel_;
}
::schedulerMessages::Response_cancel* Response::release_cancel() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Response.CANCEL)
  if (has_cancel()) {
    clear_has_type();
    ::schedulerMessages::Response_cancel* temp = type_.cancel_;
    type_.cancel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_cancel(::schedulerMessages::Response_cancel* cancel) {
  clear_type();
  if (cancel) {
    set_has_cancel();
    type_.cancel_ = cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Response.CANCEL)
}

// optional .schedulerMessages.Response_add_dependency ADD_DEPENDENCY = 7;
bool Response::has_add_dependency() const {
  return type_case() == kADDDEPENDENCY;
}
void Response::set_has_add_dependency() {
  _oneof_case_[0] = kADDDEPENDENCY;
}
void Response::clear_add_dependency() {
  if (has_add_dependency()) {
    delete type_.add_dependency_;
    clear_has_type();
  }
}
 const ::schedulerMessages::Response_add_dependency& Response::add_dependency() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response.ADD_DEPENDENCY)
  return has_add_dependency()
      ? *type_.add_dependency_
      : ::schedulerMessages::Response_add_dependency::default_instance();
}
::schedulerMessages::Response_add_dependency* Response::mutable_add_dependency() {
  if (!has_add_dependency()) {
    clear_type();
    set_has_add_dependency();
    type_.add_dependency_ = new ::schedulerMessages::Response_add_dependency;
  }
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Response.ADD_DEPENDENCY)
  return type_.add_dependency_;
}
::schedulerMessages::Response_add_dependency* Response::release_add_dependency() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Response.ADD_DEPENDENCY)
  if (has_add_dependency()) {
    clear_has_type();
    ::schedulerMessages::Response_add_dependency* temp = type_.add_dependency_;
    type_.add_dependency_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_add_dependency(::schedulerMessages::Response_add_dependency* add_dependency) {
  clear_type();
  if (add_dependency) {
    set_has_add_dependency();
    type_.add_dependency_ = add_dependency;
  }
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Response.ADD_DEPENDENCY)
}

bool Response::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void Response::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
Response::TypeCase Response::type_case() const {
  return Response::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_assign::kCountFieldNumber;
const int Request_assign::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_assign::Request_assign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Request_assign)
}

void Request_assign::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request_assign::Request_assign(const Request_assign& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Request_assign)
}

void Request_assign::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  count_ = 0;
  job_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request_assign::~Request_assign() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Request_assign)
  SharedDtor();
}

void Request_assign::SharedDtor() {
  job_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_assign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_assign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_assign_descriptor_;
}

const Request_assign& Request_assign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Request_assign* Request_assign::default_instance_ = NULL;

Request_assign* Request_assign::New(::google::protobuf::Arena* arena) const {
  Request_assign* n = new Request_assign;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_assign::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Request_assign)
  count_ = 0;
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Request_assign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Request_assign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_job;
        break;
      }

      // optional string job = 2;
      case 2: {
        if (tag == 18) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schedulerMessages.Request_assign.job"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Request_assign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Request_assign)
  return false;
#undef DO_
}

void Request_assign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Request_assign)
  // optional int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_assign.job");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->job(), output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Request_assign)
}

::google::protobuf::uint8* Request_assign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Request_assign)
  // optional int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_assign.job");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->job(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Request_assign)
  return target;
}

int Request_assign::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Request_assign)
  int total_size = 0;

  // optional int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_assign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Request_assign)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_assign* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_assign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Request_assign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Request_assign)
    MergeFrom(*source);
  }
}

void Request_assign::MergeFrom(const Request_assign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Request_assign)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.job().size() > 0) {

    job_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_);
  }
}

void Request_assign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Request_assign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_assign::CopyFrom(const Request_assign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Request_assign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_assign::IsInitialized() const {

  return true;
}

void Request_assign::Swap(Request_assign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_assign::InternalSwap(Request_assign* other) {
  std::swap(count_, other->count_);
  job_.Swap(&other->job_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_assign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_assign_descriptor_;
  metadata.reflection = Request_assign_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_assign

// optional int32 count = 1;
void Request_assign::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 Request_assign::count() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_assign.count)
  return count_;
}
 void Request_assign::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_assign.count)
}

// optional string job = 2;
void Request_assign::clear_job() {
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request_assign::job() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_assign.job)
  return job_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_assign::set_job(const ::std::string& value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_assign.job)
}
 void Request_assign::set_job(const char* value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schedulerMessages.Request_assign.job)
}
 void Request_assign::set_job(const char* value, size_t size) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schedulerMessages.Request_assign.job)
}
 ::std::string* Request_assign::mutable_job() {
  
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request_assign.job)
  return job_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_assign::release_job() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request_assign.job)
  
  return job_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_assign::set_allocated_job(::std::string* job) {
  if (job != NULL) {
    
  } else {
    
  }
  job_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job);
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request_assign.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_queue::kIdFieldNumber;
const int Request_queue::kInputBundleFieldNumber;
const int Request_queue::kTaskQueuedFromFieldNumber;
const int Request_queue::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_queue::Request_queue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Request_queue)
}

void Request_queue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request_queue::Request_queue(const Request_queue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Request_queue)
}

void Request_queue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  input_bundle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_queued_from_ = 0;
  job_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request_queue::~Request_queue() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Request_queue)
  SharedDtor();
}

void Request_queue::SharedDtor() {
  input_bundle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_queue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_queue_descriptor_;
}

const Request_queue& Request_queue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Request_queue* Request_queue::default_instance_ = NULL;

Request_queue* Request_queue::New(::google::protobuf::Arena* arena) const {
  Request_queue* n = new Request_queue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_queue::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Request_queue)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_queue, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_queue*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, task_queued_from_);
  input_bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Request_queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Request_queue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input_bundle;
        break;
      }

      // optional string input_bundle = 2;
      case 2: {
        if (tag == 18) {
         parse_input_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_bundle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_bundle().data(), this->input_bundle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schedulerMessages.Request_queue.input_bundle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_task_queued_from;
        break;
      }

      // optional int32 task_queued_from = 3;
      case 3: {
        if (tag == 24) {
         parse_task_queued_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_queued_from_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_job;
        break;
      }

      // optional string job = 4;
      case 4: {
        if (tag == 34) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schedulerMessages.Request_queue.job"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Request_queue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Request_queue)
  return false;
#undef DO_
}

void Request_queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Request_queue)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string input_bundle = 2;
  if (this->input_bundle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_bundle().data(), this->input_bundle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_queue.input_bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->input_bundle(), output);
  }

  // optional int32 task_queued_from = 3;
  if (this->task_queued_from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_queued_from(), output);
  }

  // optional string job = 4;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_queue.job");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->job(), output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Request_queue)
}

::google::protobuf::uint8* Request_queue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Request_queue)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string input_bundle = 2;
  if (this->input_bundle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_bundle().data(), this->input_bundle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_queue.input_bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input_bundle(), target);
  }

  // optional int32 task_queued_from = 3;
  if (this->task_queued_from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_queued_from(), target);
  }

  // optional string job = 4;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_queue.job");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->job(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Request_queue)
  return target;
}

int Request_queue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Request_queue)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string input_bundle = 2;
  if (this->input_bundle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_bundle());
  }

  // optional int32 task_queued_from = 3;
  if (this->task_queued_from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_queued_from());
  }

  // optional string job = 4;
  if (this->job().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_queue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Request_queue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_queue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_queue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Request_queue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Request_queue)
    MergeFrom(*source);
  }
}

void Request_queue::MergeFrom(const Request_queue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Request_queue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.input_bundle().size() > 0) {

    input_bundle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_bundle_);
  }
  if (from.task_queued_from() != 0) {
    set_task_queued_from(from.task_queued_from());
  }
  if (from.job().size() > 0) {

    job_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_);
  }
}

void Request_queue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Request_queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_queue::CopyFrom(const Request_queue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Request_queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_queue::IsInitialized() const {

  return true;
}

void Request_queue::Swap(Request_queue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_queue::InternalSwap(Request_queue* other) {
  std::swap(id_, other->id_);
  input_bundle_.Swap(&other->input_bundle_);
  std::swap(task_queued_from_, other->task_queued_from_);
  job_.Swap(&other->job_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_queue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_queue_descriptor_;
  metadata.reflection = Request_queue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_queue

// optional int32 id = 1;
void Request_queue::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Request_queue::id() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_queue.id)
  return id_;
}
 void Request_queue::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_queue.id)
}

// optional string input_bundle = 2;
void Request_queue::clear_input_bundle() {
  input_bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request_queue::input_bundle() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_queue.input_bundle)
  return input_bundle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_queue::set_input_bundle(const ::std::string& value) {
  
  input_bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_queue.input_bundle)
}
 void Request_queue::set_input_bundle(const char* value) {
  
  input_bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schedulerMessages.Request_queue.input_bundle)
}
 void Request_queue::set_input_bundle(const char* value, size_t size) {
  
  input_bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schedulerMessages.Request_queue.input_bundle)
}
 ::std::string* Request_queue::mutable_input_bundle() {
  
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request_queue.input_bundle)
  return input_bundle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_queue::release_input_bundle() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request_queue.input_bundle)
  
  return input_bundle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_queue::set_allocated_input_bundle(::std::string* input_bundle) {
  if (input_bundle != NULL) {
    
  } else {
    
  }
  input_bundle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_bundle);
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request_queue.input_bundle)
}

// optional int32 task_queued_from = 3;
void Request_queue::clear_task_queued_from() {
  task_queued_from_ = 0;
}
 ::google::protobuf::int32 Request_queue::task_queued_from() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_queue.task_queued_from)
  return task_queued_from_;
}
 void Request_queue::set_task_queued_from(::google::protobuf::int32 value) {
  
  task_queued_from_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_queue.task_queued_from)
}

// optional string job = 4;
void Request_queue::clear_job() {
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request_queue::job() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_queue.job)
  return job_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_queue::set_job(const ::std::string& value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_queue.job)
}
 void Request_queue::set_job(const char* value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schedulerMessages.Request_queue.job)
}
 void Request_queue::set_job(const char* value, size_t size) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schedulerMessages.Request_queue.job)
}
 ::std::string* Request_queue::mutable_job() {
  
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request_queue.job)
  return job_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_queue::release_job() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request_queue.job)
  
  return job_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_queue::set_allocated_job(::std::string* job) {
  if (job != NULL) {
    
  } else {
    
  }
  job_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job);
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request_queue.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_receive::kInstanceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_receive::Request_receive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Request_receive)
}

void Request_receive::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request_receive::Request_receive(const Request_receive& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Request_receive)
}

void Request_receive::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instance_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request_receive::~Request_receive() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Request_receive)
  SharedDtor();
}

void Request_receive::SharedDtor() {
  instance_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_receive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_receive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_receive_descriptor_;
}

const Request_receive& Request_receive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Request_receive* Request_receive::default_instance_ = NULL;

Request_receive* Request_receive::New(::google::protobuf::Arena* arena) const {
  Request_receive* n = new Request_receive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_receive::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Request_receive)
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Request_receive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Request_receive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instance_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_name().data(), this->instance_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schedulerMessages.Request_receive.instance_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Request_receive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Request_receive)
  return false;
#undef DO_
}

void Request_receive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Request_receive)
  // optional string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), this->instance_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_receive.instance_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Request_receive)
}

::google::protobuf::uint8* Request_receive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Request_receive)
  // optional string instance_name = 1;
  if (this->instance_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_name().data(), this->instance_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_receive.instance_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Request_receive)
  return target;
}

int Request_receive::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Request_receive)
  int total_size = 0;

  // optional string instance_name = 1;
  if (this->instance_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_receive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Request_receive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_receive* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_receive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Request_receive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Request_receive)
    MergeFrom(*source);
  }
}

void Request_receive::MergeFrom(const Request_receive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Request_receive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.instance_name().size() > 0) {

    instance_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_name_);
  }
}

void Request_receive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Request_receive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_receive::CopyFrom(const Request_receive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Request_receive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_receive::IsInitialized() const {

  return true;
}

void Request_receive::Swap(Request_receive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_receive::InternalSwap(Request_receive* other) {
  instance_name_.Swap(&other->instance_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_receive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_receive_descriptor_;
  metadata.reflection = Request_receive_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_receive

// optional string instance_name = 1;
void Request_receive::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request_receive::instance_name() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_receive.instance_name)
  return instance_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_receive::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_receive.instance_name)
}
 void Request_receive::set_instance_name(const char* value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schedulerMessages.Request_receive.instance_name)
}
 void Request_receive::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schedulerMessages.Request_receive.instance_name)
}
 ::std::string* Request_receive::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request_receive.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_receive::release_instance_name() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request_receive.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_receive::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request_receive.instance_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_requeue::kIdFieldNumber;
const int Request_requeue::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_requeue::Request_requeue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Request_requeue)
}

void Request_requeue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request_requeue::Request_requeue(const Request_requeue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Request_requeue)
}

void Request_requeue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  job_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request_requeue::~Request_requeue() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Request_requeue)
  SharedDtor();
}

void Request_requeue::SharedDtor() {
  job_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_requeue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_requeue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_requeue_descriptor_;
}

const Request_requeue& Request_requeue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Request_requeue* Request_requeue::default_instance_ = NULL;

Request_requeue* Request_requeue::New(::google::protobuf::Arena* arena) const {
  Request_requeue* n = new Request_requeue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_requeue::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Request_requeue)
  id_ = 0;
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Request_requeue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Request_requeue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_job;
        break;
      }

      // optional string job = 2;
      case 2: {
        if (tag == 18) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schedulerMessages.Request_requeue.job"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Request_requeue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Request_requeue)
  return false;
#undef DO_
}

void Request_requeue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Request_requeue)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_requeue.job");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->job(), output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Request_requeue)
}

::google::protobuf::uint8* Request_requeue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Request_requeue)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_requeue.job");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->job(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Request_requeue)
  return target;
}

int Request_requeue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Request_requeue)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_requeue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Request_requeue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_requeue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_requeue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Request_requeue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Request_requeue)
    MergeFrom(*source);
  }
}

void Request_requeue::MergeFrom(const Request_requeue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Request_requeue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.job().size() > 0) {

    job_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_);
  }
}

void Request_requeue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Request_requeue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_requeue::CopyFrom(const Request_requeue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Request_requeue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_requeue::IsInitialized() const {

  return true;
}

void Request_requeue::Swap(Request_requeue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_requeue::InternalSwap(Request_requeue* other) {
  std::swap(id_, other->id_);
  job_.Swap(&other->job_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_requeue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_requeue_descriptor_;
  metadata.reflection = Request_requeue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_requeue

// optional int32 id = 1;
void Request_requeue::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Request_requeue::id() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_requeue.id)
  return id_;
}
 void Request_requeue::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_requeue.id)
}

// optional string job = 2;
void Request_requeue::clear_job() {
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request_requeue::job() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_requeue.job)
  return job_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_requeue::set_job(const ::std::string& value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_requeue.job)
}
 void Request_requeue::set_job(const char* value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schedulerMessages.Request_requeue.job)
}
 void Request_requeue::set_job(const char* value, size_t size) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schedulerMessages.Request_requeue.job)
}
 ::std::string* Request_requeue::mutable_job() {
  
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request_requeue.job)
  return job_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_requeue::release_job() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request_requeue.job)
  
  return job_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_requeue::set_allocated_job(::std::string* job) {
  if (job != NULL) {
    
  } else {
    
  }
  job_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job);
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request_requeue.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_finish::kIdFieldNumber;
const int Request_finish::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_finish::Request_finish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Request_finish)
}

void Request_finish::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request_finish::Request_finish(const Request_finish& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Request_finish)
}

void Request_finish::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  job_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request_finish::~Request_finish() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Request_finish)
  SharedDtor();
}

void Request_finish::SharedDtor() {
  job_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_finish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_finish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_finish_descriptor_;
}

const Request_finish& Request_finish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Request_finish* Request_finish::default_instance_ = NULL;

Request_finish* Request_finish::New(::google::protobuf::Arena* arena) const {
  Request_finish* n = new Request_finish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_finish::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Request_finish)
  id_ = 0;
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Request_finish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Request_finish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_job;
        break;
      }

      // optional string job = 2;
      case 2: {
        if (tag == 18) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schedulerMessages.Request_finish.job"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Request_finish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Request_finish)
  return false;
#undef DO_
}

void Request_finish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Request_finish)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_finish.job");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->job(), output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Request_finish)
}

::google::protobuf::uint8* Request_finish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Request_finish)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_finish.job");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->job(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Request_finish)
  return target;
}

int Request_finish::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Request_finish)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_finish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Request_finish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_finish* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_finish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Request_finish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Request_finish)
    MergeFrom(*source);
  }
}

void Request_finish::MergeFrom(const Request_finish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Request_finish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.job().size() > 0) {

    job_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_);
  }
}

void Request_finish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Request_finish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_finish::CopyFrom(const Request_finish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Request_finish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_finish::IsInitialized() const {

  return true;
}

void Request_finish::Swap(Request_finish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_finish::InternalSwap(Request_finish* other) {
  std::swap(id_, other->id_);
  job_.Swap(&other->job_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_finish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_finish_descriptor_;
  metadata.reflection = Request_finish_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_finish

// optional int32 id = 1;
void Request_finish::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Request_finish::id() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_finish.id)
  return id_;
}
 void Request_finish::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_finish.id)
}

// optional string job = 2;
void Request_finish::clear_job() {
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request_finish::job() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_finish.job)
  return job_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_finish::set_job(const ::std::string& value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_finish.job)
}
 void Request_finish::set_job(const char* value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schedulerMessages.Request_finish.job)
}
 void Request_finish::set_job(const char* value, size_t size) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schedulerMessages.Request_finish.job)
}
 ::std::string* Request_finish::mutable_job() {
  
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request_finish.job)
  return job_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_finish::release_job() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request_finish.job)
  
  return job_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_finish::set_allocated_job(::std::string* job) {
  if (job != NULL) {
    
  } else {
    
  }
  job_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job);
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request_finish.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_cancel::kIdFieldNumber;
const int Request_cancel::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_cancel::Request_cancel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Request_cancel)
}

void Request_cancel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request_cancel::Request_cancel(const Request_cancel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Request_cancel)
}

void Request_cancel::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  job_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request_cancel::~Request_cancel() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Request_cancel)
  SharedDtor();
}

void Request_cancel::SharedDtor() {
  job_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_cancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_cancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_cancel_descriptor_;
}

const Request_cancel& Request_cancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Request_cancel* Request_cancel::default_instance_ = NULL;

Request_cancel* Request_cancel::New(::google::protobuf::Arena* arena) const {
  Request_cancel* n = new Request_cancel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_cancel::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Request_cancel)
  id_ = 0;
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Request_cancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Request_cancel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_job;
        break;
      }

      // optional string job = 2;
      case 2: {
        if (tag == 18) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schedulerMessages.Request_cancel.job"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Request_cancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Request_cancel)
  return false;
#undef DO_
}

void Request_cancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Request_cancel)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_cancel.job");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->job(), output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Request_cancel)
}

::google::protobuf::uint8* Request_cancel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Request_cancel)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_cancel.job");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->job(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Request_cancel)
  return target;
}

int Request_cancel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Request_cancel)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string job = 2;
  if (this->job().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_cancel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Request_cancel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_cancel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_cancel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Request_cancel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Request_cancel)
    MergeFrom(*source);
  }
}

void Request_cancel::MergeFrom(const Request_cancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Request_cancel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.job().size() > 0) {

    job_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_);
  }
}

void Request_cancel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Request_cancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_cancel::CopyFrom(const Request_cancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Request_cancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_cancel::IsInitialized() const {

  return true;
}

void Request_cancel::Swap(Request_cancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_cancel::InternalSwap(Request_cancel* other) {
  std::swap(id_, other->id_);
  job_.Swap(&other->job_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_cancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_cancel_descriptor_;
  metadata.reflection = Request_cancel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_cancel

// optional int32 id = 1;
void Request_cancel::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Request_cancel::id() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_cancel.id)
  return id_;
}
 void Request_cancel::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_cancel.id)
}

// optional string job = 2;
void Request_cancel::clear_job() {
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request_cancel::job() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_cancel.job)
  return job_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_cancel::set_job(const ::std::string& value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_cancel.job)
}
 void Request_cancel::set_job(const char* value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schedulerMessages.Request_cancel.job)
}
 void Request_cancel::set_job(const char* value, size_t size) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schedulerMessages.Request_cancel.job)
}
 ::std::string* Request_cancel::mutable_job() {
  
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request_cancel.job)
  return job_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_cancel::release_job() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request_cancel.job)
  
  return job_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_cancel::set_allocated_job(::std::string* job) {
  if (job != NULL) {
    
  } else {
    
  }
  job_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job);
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request_cancel.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request_add_dependency::kParentIdFieldNumber;
const int Request_add_dependency::kChildIdFieldNumber;
const int Request_add_dependency::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request_add_dependency::Request_add_dependency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Request_add_dependency)
}

void Request_add_dependency::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request_add_dependency::Request_add_dependency(const Request_add_dependency& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Request_add_dependency)
}

void Request_add_dependency::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parent_id_ = 0;
  child_id_ = 0;
  job_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request_add_dependency::~Request_add_dependency() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Request_add_dependency)
  SharedDtor();
}

void Request_add_dependency::SharedDtor() {
  job_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request_add_dependency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_add_dependency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_add_dependency_descriptor_;
}

const Request_add_dependency& Request_add_dependency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Request_add_dependency* Request_add_dependency::default_instance_ = NULL;

Request_add_dependency* Request_add_dependency::New(::google::protobuf::Arena* arena) const {
  Request_add_dependency* n = new Request_add_dependency;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request_add_dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Request_add_dependency)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request_add_dependency, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request_add_dependency*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(parent_id_, child_id_);
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Request_add_dependency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Request_add_dependency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 parent_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_child_id;
        break;
      }

      // optional int32 child_id = 2;
      case 2: {
        if (tag == 16) {
         parse_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_job;
        break;
      }

      // optional string job = 3;
      case 3: {
        if (tag == 26) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schedulerMessages.Request_add_dependency.job"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Request_add_dependency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Request_add_dependency)
  return false;
#undef DO_
}

void Request_add_dependency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Request_add_dependency)
  // optional int32 parent_id = 1;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->parent_id(), output);
  }

  // optional int32 child_id = 2;
  if (this->child_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->child_id(), output);
  }

  // optional string job = 3;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_add_dependency.job");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->job(), output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Request_add_dependency)
}

::google::protobuf::uint8* Request_add_dependency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Request_add_dependency)
  // optional int32 parent_id = 1;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->parent_id(), target);
  }

  // optional int32 child_id = 2;
  if (this->child_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->child_id(), target);
  }

  // optional string job = 3;
  if (this->job().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Request_add_dependency.job");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->job(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Request_add_dependency)
  return target;
}

int Request_add_dependency::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Request_add_dependency)
  int total_size = 0;

  // optional int32 parent_id = 1;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent_id());
  }

  // optional int32 child_id = 2;
  if (this->child_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->child_id());
  }

  // optional string job = 3;
  if (this->job().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_add_dependency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Request_add_dependency)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request_add_dependency* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request_add_dependency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Request_add_dependency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Request_add_dependency)
    MergeFrom(*source);
  }
}

void Request_add_dependency::MergeFrom(const Request_add_dependency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Request_add_dependency)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
  if (from.child_id() != 0) {
    set_child_id(from.child_id());
  }
  if (from.job().size() > 0) {

    job_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_);
  }
}

void Request_add_dependency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Request_add_dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_add_dependency::CopyFrom(const Request_add_dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Request_add_dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_add_dependency::IsInitialized() const {

  return true;
}

void Request_add_dependency::Swap(Request_add_dependency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request_add_dependency::InternalSwap(Request_add_dependency* other) {
  std::swap(parent_id_, other->parent_id_);
  std::swap(child_id_, other->child_id_);
  job_.Swap(&other->job_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request_add_dependency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_add_dependency_descriptor_;
  metadata.reflection = Request_add_dependency_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_add_dependency

// optional int32 parent_id = 1;
void Request_add_dependency::clear_parent_id() {
  parent_id_ = 0;
}
 ::google::protobuf::int32 Request_add_dependency::parent_id() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_add_dependency.parent_id)
  return parent_id_;
}
 void Request_add_dependency::set_parent_id(::google::protobuf::int32 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_add_dependency.parent_id)
}

// optional int32 child_id = 2;
void Request_add_dependency::clear_child_id() {
  child_id_ = 0;
}
 ::google::protobuf::int32 Request_add_dependency::child_id() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_add_dependency.child_id)
  return child_id_;
}
 void Request_add_dependency::set_child_id(::google::protobuf::int32 value) {
  
  child_id_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_add_dependency.child_id)
}

// optional string job = 3;
void Request_add_dependency::clear_job() {
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request_add_dependency::job() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Request_add_dependency.job)
  return job_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_add_dependency::set_job(const ::std::string& value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schedulerMessages.Request_add_dependency.job)
}
 void Request_add_dependency::set_job(const char* value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schedulerMessages.Request_add_dependency.job)
}
 void Request_add_dependency::set_job(const char* value, size_t size) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schedulerMessages.Request_add_dependency.job)
}
 ::std::string* Request_add_dependency::mutable_job() {
  
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Request_add_dependency.job)
  return job_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request_add_dependency::release_job() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Request_add_dependency.job)
  
  return job_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request_add_dependency::set_allocated_job(::std::string* job) {
  if (job != NULL) {
    
  } else {
    
  }
  job_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job);
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Request_add_dependency.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_assign::kMultipleFieldNumber;
const int Response_assign::kIdFieldNumber;
const int Response_assign::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_assign::Response_assign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Response_assign)
}

void Response_assign::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response_assign::Response_assign(const Response_assign& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Response_assign)
}

void Response_assign::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  multiple_ = false;
  id_ = 0;
}

Response_assign::~Response_assign() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Response_assign)
  SharedDtor();
}

void Response_assign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_assign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_assign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_assign_descriptor_;
}

const Response_assign& Response_assign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Response_assign* Response_assign::default_instance_ = NULL;

Response_assign* Response_assign::New(::google::protobuf::Arena* arena) const {
  Response_assign* n = new Response_assign;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_assign::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Response_assign)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Response_assign, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Response_assign*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(multiple_, id_);

#undef ZR_HELPER_
#undef ZR_

  ids_.Clear();
}

bool Response_assign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Response_assign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool multiple = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ids;
        break;
      }

      // repeated int32 ids = 3;
      case 3: {
        if (tag == 26) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Response_assign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Response_assign)
  return false;
#undef DO_
}

void Response_assign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Response_assign)
  // optional bool multiple = 1;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->multiple(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated int32 ids = 3;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Response_assign)
}

::google::protobuf::uint8* Response_assign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Response_assign)
  // optional bool multiple = 1;
  if (this->multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->multiple(), target);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated int32 ids = 3;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Response_assign)
  return target;
}

int Response_assign::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Response_assign)
  int total_size = 0;

  // optional bool multiple = 1;
  if (this->multiple() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // repeated int32 ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_assign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Response_assign)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_assign* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_assign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Response_assign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Response_assign)
    MergeFrom(*source);
  }
}

void Response_assign::MergeFrom(const Response_assign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Response_assign)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ids_.MergeFrom(from.ids_);
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Response_assign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Response_assign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_assign::CopyFrom(const Response_assign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Response_assign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_assign::IsInitialized() const {

  return true;
}

void Response_assign::Swap(Response_assign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_assign::InternalSwap(Response_assign* other) {
  std::swap(multiple_, other->multiple_);
  std::swap(id_, other->id_);
  ids_.UnsafeArenaSwap(&other->ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_assign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_assign_descriptor_;
  metadata.reflection = Response_assign_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response_assign

// optional bool multiple = 1;
void Response_assign::clear_multiple() {
  multiple_ = false;
}
 bool Response_assign::multiple() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response_assign.multiple)
  return multiple_;
}
 void Response_assign::set_multiple(bool value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Response_assign.multiple)
}

// optional int32 id = 2;
void Response_assign::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Response_assign::id() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response_assign.id)
  return id_;
}
 void Response_assign::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Response_assign.id)
}

// repeated int32 ids = 3;
int Response_assign::ids_size() const {
  return ids_.size();
}
void Response_assign::clear_ids() {
  ids_.Clear();
}
 ::google::protobuf::int32 Response_assign::ids(int index) const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response_assign.ids)
  return ids_.Get(index);
}
 void Response_assign::set_ids(int index, ::google::protobuf::int32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:schedulerMessages.Response_assign.ids)
}
 void Response_assign::add_ids(::google::protobuf::int32 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:schedulerMessages.Response_assign.ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Response_assign::ids() const {
  // @@protoc_insertion_point(field_list:schedulerMessages.Response_assign.ids)
  return ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Response_assign::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:schedulerMessages.Response_assign.ids)
  return &ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_queue::Response_queue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Response_queue)
}

void Response_queue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response_queue::Response_queue(const Response_queue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Response_queue)
}

void Response_queue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Response_queue::~Response_queue() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Response_queue)
  SharedDtor();
}

void Response_queue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_queue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_queue_descriptor_;
}

const Response_queue& Response_queue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Response_queue* Response_queue::default_instance_ = NULL;

Response_queue* Response_queue::New(::google::protobuf::Arena* arena) const {
  Response_queue* n = new Response_queue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_queue::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Response_queue)
}

bool Response_queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Response_queue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Response_queue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Response_queue)
  return false;
#undef DO_
}

void Response_queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Response_queue)
  // @@protoc_insertion_point(serialize_end:schedulerMessages.Response_queue)
}

::google::protobuf::uint8* Response_queue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Response_queue)
  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Response_queue)
  return target;
}

int Response_queue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Response_queue)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_queue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Response_queue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_queue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_queue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Response_queue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Response_queue)
    MergeFrom(*source);
  }
}

void Response_queue::MergeFrom(const Response_queue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Response_queue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Response_queue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Response_queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_queue::CopyFrom(const Response_queue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Response_queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_queue::IsInitialized() const {

  return true;
}

void Response_queue::Swap(Response_queue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_queue::InternalSwap(Response_queue* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_queue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_queue_descriptor_;
  metadata.reflection = Response_queue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response_queue

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_receive::kInputBundleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_receive::Response_receive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Response_receive)
}

void Response_receive::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response_receive::Response_receive(const Response_receive& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Response_receive)
}

void Response_receive::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_bundle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Response_receive::~Response_receive() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Response_receive)
  SharedDtor();
}

void Response_receive::SharedDtor() {
  input_bundle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response_receive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_receive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_receive_descriptor_;
}

const Response_receive& Response_receive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Response_receive* Response_receive::default_instance_ = NULL;

Response_receive* Response_receive::New(::google::protobuf::Arena* arena) const {
  Response_receive* n = new Response_receive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_receive::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Response_receive)
  input_bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Response_receive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Response_receive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string input_bundle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_bundle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_bundle().data(), this->input_bundle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schedulerMessages.Response_receive.input_bundle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Response_receive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Response_receive)
  return false;
#undef DO_
}

void Response_receive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Response_receive)
  // optional string input_bundle = 1;
  if (this->input_bundle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_bundle().data(), this->input_bundle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Response_receive.input_bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_bundle(), output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Response_receive)
}

::google::protobuf::uint8* Response_receive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Response_receive)
  // optional string input_bundle = 1;
  if (this->input_bundle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_bundle().data(), this->input_bundle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schedulerMessages.Response_receive.input_bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_bundle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Response_receive)
  return target;
}

int Response_receive::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Response_receive)
  int total_size = 0;

  // optional string input_bundle = 1;
  if (this->input_bundle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_bundle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_receive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Response_receive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_receive* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_receive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Response_receive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Response_receive)
    MergeFrom(*source);
  }
}

void Response_receive::MergeFrom(const Response_receive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Response_receive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.input_bundle().size() > 0) {

    input_bundle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_bundle_);
  }
}

void Response_receive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Response_receive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_receive::CopyFrom(const Response_receive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Response_receive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_receive::IsInitialized() const {

  return true;
}

void Response_receive::Swap(Response_receive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_receive::InternalSwap(Response_receive* other) {
  input_bundle_.Swap(&other->input_bundle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_receive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_receive_descriptor_;
  metadata.reflection = Response_receive_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response_receive

// optional string input_bundle = 1;
void Response_receive::clear_input_bundle() {
  input_bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Response_receive::input_bundle() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response_receive.input_bundle)
  return input_bundle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_receive::set_input_bundle(const ::std::string& value) {
  
  input_bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schedulerMessages.Response_receive.input_bundle)
}
 void Response_receive::set_input_bundle(const char* value) {
  
  input_bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schedulerMessages.Response_receive.input_bundle)
}
 void Response_receive::set_input_bundle(const char* value, size_t size) {
  
  input_bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schedulerMessages.Response_receive.input_bundle)
}
 ::std::string* Response_receive::mutable_input_bundle() {
  
  // @@protoc_insertion_point(field_mutable:schedulerMessages.Response_receive.input_bundle)
  return input_bundle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response_receive::release_input_bundle() {
  // @@protoc_insertion_point(field_release:schedulerMessages.Response_receive.input_bundle)
  
  return input_bundle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response_receive::set_allocated_input_bundle(::std::string* input_bundle) {
  if (input_bundle != NULL) {
    
  } else {
    
  }
  input_bundle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_bundle);
  // @@protoc_insertion_point(field_set_allocated:schedulerMessages.Response_receive.input_bundle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_requeue::kRequeueFailedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_requeue::Response_requeue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Response_requeue)
}

void Response_requeue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response_requeue::Response_requeue(const Response_requeue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Response_requeue)
}

void Response_requeue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  requeue_failed_ = false;
}

Response_requeue::~Response_requeue() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Response_requeue)
  SharedDtor();
}

void Response_requeue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_requeue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_requeue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_requeue_descriptor_;
}

const Response_requeue& Response_requeue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Response_requeue* Response_requeue::default_instance_ = NULL;

Response_requeue* Response_requeue::New(::google::protobuf::Arena* arena) const {
  Response_requeue* n = new Response_requeue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_requeue::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Response_requeue)
  requeue_failed_ = false;
}

bool Response_requeue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Response_requeue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool requeue_failed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requeue_failed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Response_requeue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Response_requeue)
  return false;
#undef DO_
}

void Response_requeue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Response_requeue)
  // optional bool requeue_failed = 1;
  if (this->requeue_failed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->requeue_failed(), output);
  }

  // @@protoc_insertion_point(serialize_end:schedulerMessages.Response_requeue)
}

::google::protobuf::uint8* Response_requeue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Response_requeue)
  // optional bool requeue_failed = 1;
  if (this->requeue_failed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->requeue_failed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Response_requeue)
  return target;
}

int Response_requeue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Response_requeue)
  int total_size = 0;

  // optional bool requeue_failed = 1;
  if (this->requeue_failed() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_requeue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Response_requeue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_requeue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_requeue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Response_requeue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Response_requeue)
    MergeFrom(*source);
  }
}

void Response_requeue::MergeFrom(const Response_requeue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Response_requeue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.requeue_failed() != 0) {
    set_requeue_failed(from.requeue_failed());
  }
}

void Response_requeue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Response_requeue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_requeue::CopyFrom(const Response_requeue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Response_requeue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_requeue::IsInitialized() const {

  return true;
}

void Response_requeue::Swap(Response_requeue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_requeue::InternalSwap(Response_requeue* other) {
  std::swap(requeue_failed_, other->requeue_failed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_requeue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_requeue_descriptor_;
  metadata.reflection = Response_requeue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response_requeue

// optional bool requeue_failed = 1;
void Response_requeue::clear_requeue_failed() {
  requeue_failed_ = false;
}
 bool Response_requeue::requeue_failed() const {
  // @@protoc_insertion_point(field_get:schedulerMessages.Response_requeue.requeue_failed)
  return requeue_failed_;
}
 void Response_requeue::set_requeue_failed(bool value) {
  
  requeue_failed_ = value;
  // @@protoc_insertion_point(field_set:schedulerMessages.Response_requeue.requeue_failed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_finish::Response_finish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Response_finish)
}

void Response_finish::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response_finish::Response_finish(const Response_finish& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Response_finish)
}

void Response_finish::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Response_finish::~Response_finish() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Response_finish)
  SharedDtor();
}

void Response_finish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_finish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_finish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_finish_descriptor_;
}

const Response_finish& Response_finish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Response_finish* Response_finish::default_instance_ = NULL;

Response_finish* Response_finish::New(::google::protobuf::Arena* arena) const {
  Response_finish* n = new Response_finish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_finish::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Response_finish)
}

bool Response_finish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Response_finish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Response_finish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Response_finish)
  return false;
#undef DO_
}

void Response_finish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Response_finish)
  // @@protoc_insertion_point(serialize_end:schedulerMessages.Response_finish)
}

::google::protobuf::uint8* Response_finish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Response_finish)
  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Response_finish)
  return target;
}

int Response_finish::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Response_finish)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_finish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Response_finish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_finish* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_finish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Response_finish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Response_finish)
    MergeFrom(*source);
  }
}

void Response_finish::MergeFrom(const Response_finish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Response_finish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Response_finish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Response_finish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_finish::CopyFrom(const Response_finish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Response_finish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_finish::IsInitialized() const {

  return true;
}

void Response_finish::Swap(Response_finish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_finish::InternalSwap(Response_finish* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_finish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_finish_descriptor_;
  metadata.reflection = Response_finish_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response_finish

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_cancel::Response_cancel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Response_cancel)
}

void Response_cancel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response_cancel::Response_cancel(const Response_cancel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Response_cancel)
}

void Response_cancel::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Response_cancel::~Response_cancel() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Response_cancel)
  SharedDtor();
}

void Response_cancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_cancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_cancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_cancel_descriptor_;
}

const Response_cancel& Response_cancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Response_cancel* Response_cancel::default_instance_ = NULL;

Response_cancel* Response_cancel::New(::google::protobuf::Arena* arena) const {
  Response_cancel* n = new Response_cancel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_cancel::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Response_cancel)
}

bool Response_cancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Response_cancel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Response_cancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Response_cancel)
  return false;
#undef DO_
}

void Response_cancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Response_cancel)
  // @@protoc_insertion_point(serialize_end:schedulerMessages.Response_cancel)
}

::google::protobuf::uint8* Response_cancel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Response_cancel)
  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Response_cancel)
  return target;
}

int Response_cancel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Response_cancel)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_cancel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Response_cancel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_cancel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_cancel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Response_cancel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Response_cancel)
    MergeFrom(*source);
  }
}

void Response_cancel::MergeFrom(const Response_cancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Response_cancel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Response_cancel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Response_cancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_cancel::CopyFrom(const Response_cancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Response_cancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_cancel::IsInitialized() const {

  return true;
}

void Response_cancel::Swap(Response_cancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_cancel::InternalSwap(Response_cancel* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_cancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_cancel_descriptor_;
  metadata.reflection = Response_cancel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response_cancel

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_add_dependency::Response_add_dependency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerMessages.Response_add_dependency)
}

void Response_add_dependency::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response_add_dependency::Response_add_dependency(const Response_add_dependency& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schedulerMessages.Response_add_dependency)
}

void Response_add_dependency::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Response_add_dependency::~Response_add_dependency() {
  // @@protoc_insertion_point(destructor:schedulerMessages.Response_add_dependency)
  SharedDtor();
}

void Response_add_dependency::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_add_dependency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_add_dependency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_add_dependency_descriptor_;
}

const Response_add_dependency& Response_add_dependency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Response_add_dependency* Response_add_dependency::default_instance_ = NULL;

Response_add_dependency* Response_add_dependency::New(::google::protobuf::Arena* arena) const {
  Response_add_dependency* n = new Response_add_dependency;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response_add_dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerMessages.Response_add_dependency)
}

bool Response_add_dependency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerMessages.Response_add_dependency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerMessages.Response_add_dependency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerMessages.Response_add_dependency)
  return false;
#undef DO_
}

void Response_add_dependency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerMessages.Response_add_dependency)
  // @@protoc_insertion_point(serialize_end:schedulerMessages.Response_add_dependency)
}

::google::protobuf::uint8* Response_add_dependency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schedulerMessages.Response_add_dependency)
  // @@protoc_insertion_point(serialize_to_array_end:schedulerMessages.Response_add_dependency)
  return target;
}

int Response_add_dependency::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerMessages.Response_add_dependency)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_add_dependency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerMessages.Response_add_dependency)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response_add_dependency* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response_add_dependency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerMessages.Response_add_dependency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerMessages.Response_add_dependency)
    MergeFrom(*source);
  }
}

void Response_add_dependency::MergeFrom(const Response_add_dependency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerMessages.Response_add_dependency)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Response_add_dependency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerMessages.Response_add_dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_add_dependency::CopyFrom(const Response_add_dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerMessages.Response_add_dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_add_dependency::IsInitialized() const {

  return true;
}

void Response_add_dependency::Swap(Response_add_dependency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_add_dependency::InternalSwap(Response_add_dependency* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response_add_dependency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_add_dependency_descriptor_;
  metadata.reflection = Response_add_dependency_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response_add_dependency

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace schedulerMessages

// @@protoc_insertion_point(global_scope)
